DROP DATABASE IF EXISTS TIENDA_DE_VIDEOJUEGOS;
CREATE DATABASE IF NOT EXISTS TIENDA_DE_VIDEOJUEGOS;
USE TIENDA_DE_VIDEOJUEGOS;

#TABLA ARTICULO
CREATE TABLE ARTICULO(
ID_A INT PRIMARY KEY AUTO_INCREMENT,
STOCK INT NOT NULL,
PRECIO DECIMAL(6,2) NOT NULL,

CONSTRAINT CHK_STOCK CHECK(STOCK>=0)
);

#ARTICULOS CORRESPONDIENTES A VIDEOJUEGOS
INSERT INTO ARTICULO(STOCK,PRECIO)VALUES
(56,54.99),(32,54.30),(63,59.99),(10,47.10),
(5,29.99),(27,52.83),(2,69.99),(7,34.49),
(19,29.99),(30, 29.95),(44,24.99),(29,24.99),
(200,5);

#ARTICULOS CORRESPONDIENTES A CONSOLAS
INSERT INTO ARTICULO(STOCK, PRECIO)VALUES
(10,400),(5,750),(9,698.99),(13,289),(20,299),
(12,250),(5,12),(1,1000.99),(3,900),(2,555.50);

#TABLA TICKET
CREATE TABLE TICKET(
ID INT PRIMARY KEY AUTO_INCREMENT,
FECHA_HORA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO TICKET (FECHA_HORA)VALUES
('2022-05-20 12:00:00'),('2022-05-21 13:00:00'),('2022-04-18 17:30:00'),
('2022-05-01 19:00:00'),('2022-05-26 08:30:00'),('2022-04-30 09:45:30');

 
#TABLA VIDEOJUEGO
CREATE TABLE VIDEOJUEGO(
ID_V INT PRIMARY KEY,
TITULO VARCHAR(50) NOT NULL,
PEGI ENUM('OK','3','7','12','16','18') NOT NULL,
DURACION_APROX INT NOT NULL,
PLATAFORMA ENUM('PS4','PS5','XBOX SERIE X','XBOX SERIE S','NINTENDO SWITCH','PC','WII U','OTRA') DEFAULT 'OTRA',
CONSTRAINT CHK_DUR CHECK(DURACION_APROX >=1 AND DURACION_APROX <=500),
CONSTRAINT CHK_TIT CHECK(LENGTH(TITULO)>=2 AND LENGTH(TITULO)<=50),

FOREIGN KEY (ID_V) REFERENCES ARTICULO(ID_A)
ON DELETE CASCADE
ON UPDATE CASCADE
);

INSERT INTO VIDEOJUEGO(ID_V,TITULO,PEGI,DURACION_APROX,PLATAFORMA)VALUES
(1,'THE LEGEND OF ZELDA: BREATH OF THE WILD','7',49,'NINTENDO SWITCH'),(2,'SUPER MARIO ODYSSEY','3',13,'WII U'),
(3,'ANIMAL CROSSING: NEW HORIZONS','OK',61,'NINTENDO SWITCH'),(4,'THE LAST OF US II','16',30,'PS4'),
(5,'GHOST OF TSUSHIMA','18',23,'PS5'),(6,'SPIDER-MAN: MILES MORALES','12',16,'PS5'),
(7,'FORZA HORIZON 5','12',11,'XBOX SERIE X'),(8,'GEARS 5','18',20,'XBOX SERIE S'),
(9,'HALO: THE MASTER CHIEF COLLECTION','16',40,'XBOX SERIE X'),(10,'ARK SURVIVAL EVOLVED','16',80,'PC'),
(11,'GRAND THEFT AUTO V','18',32,'PS5'),(12,'ATLAS','16',41,'PC'),(13,'TETRIX','OK',499,'OTRA');


#TABLA CONSOLA
CREATE TABLE CONSOLA(
ID_C INT PRIMARY KEY,
MARCA ENUM('SONY','MICROSOFT','NINTENDO','OTRO'),
MODELO ENUM('PS4','PS5','XBOX SERIE X','XBOX SERIE S','SWITCH','WII U','OTRO'),
COLOR ENUM('NEGRO','BLANCO','ROJO','VERDE','AZUL','AMARILLO','OTRO'),
MINI_DESCRIPCION VARCHAR(30),
EDICION_ESPECIAL TINYINT NOT NULL DEFAULT 0,
FOREIGN KEY(ID_C)REFERENCES ARTICULO(ID_A)
ON DELETE CASCADE
ON UPDATE CASCADE
);

INSERT INTO CONSOLA(ID_C,MARCA,MODELO,COLOR,EDICION_ESPECIAL,MINI_DESCRIPCION)VALUES
(14,'SONY','PS4','NEGRO',FALSE,NULL),(15,'SONY','PS5','BLANCO',FALSE,NULL),
(16,'MICROSOFT','XBOX SERIE X','VERDE',FALSE,NULL),(17,'MICROSOFT','XBOX SERIE S','OTRO',FALSE,'ES NARANJA'),
(18,'NINTENDO','SWITCH','NEGRO',FALSE,'TAMBIÉN ES AZUL Y ROJA'),(19,'NINTENDO','WII U','AMARILLO',FALSE,NULL),
(20,'OTRO','OTRO','ROJO',FALSE,'TAMAGOTCHI DE BANDAI'),(21,'SONY','PS5','OTRO',TRUE,'GOLD EDITION'),
(22,'MICROSOFT','XBOX SERIE X','NEGRO',TRUE,'COLABO CON HALLO'),(23,'NINTENDO','SWITCH','AMARILLO',TRUE,'POKEMON EDITION');


#TABLA TICKET_ARTICULO
CREATE TABLE TICKET_ARTICULO(
ID_TICKET INT,
ID_ARTICULO INT,
CANT INT NOT NULL DEFAULT 1,

PRIMARY KEY (ID_TICKET, ID_ARTICULO),

FOREIGN KEY(ID_ARTICULO)REFERENCES ARTICULO(ID_A)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY(ID_TICKET)REFERENCES TICKET(ID)
ON DELETE CASCADE
ON UPDATE CASCADE,

CONSTRAINT CHK_CANT CHECK(CANT>0)
);

INSERT INTO TICKET_ARTICULO (ID_TICKET,ID_ARTICULO,CANT)VALUES
(1,14,1),(1,11,1),(2,14,1),(2,15,1),
(3,9,2),(4,13,20),(5,18,2),(5,3,5),(6,10,1),(6,14,6);


#Triggers de evitar ventas si no hay stock.
#Trigger para reducir stock con cada nuevo ticket que se añada.(Ventas)
DELIMITER //
DROP TRIGGER IF EXISTS AJST_STOCK_CREAR_TICKET //
CREATE TRIGGER AJST_STOCK_CREAR_TICKET
BEFORE INSERT ON TICKET_ARTICULO
FOR EACH ROW
BEGIN
	DECLARE STOCK_DSP INT;
	SELECT A.STOCK INTO STOCK_DSP FROM ARTICULO A WHERE A.ID_A = NEW.ID_ARTICULO;
	IF NEW.CANT > STOCK_DSP THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "NO SE PUEDE REALIZAR ESTA COMPRA YA QUE EL STOCK DISPONIBLE ES INFERIOR A LAS UDS DEL TICKET";
	ELSE
		UPDATE ARTICULO SET STOCK= STOCK - NEW.CANT WHERE ID_A = NEW.ID_ARTICULO;
	END IF;
END;
//
DELIMITER ;


#Trigger para aumentar el stock con cada ticket que se borre.(Devoluciones)
DELIMITER //
DROP TRIGGER IF EXISTS AJST_STOCK_DEVOLVER_TICKET //
CREATE TRIGGER AJST_STOCK_DEVOLVER_TICKET
AFTER DELETE ON TICKET_ARTICULO
FOR EACH ROW
BEGIN 
	UPDATE ARTICULO SET STOCK= STOCK + OLD.CANT WHERE ID_A = OLD.ID_ARTICULO;
	CALL CHECK_TICKET_VACIO(OLD.ID_TICKET, OLD.ID_ARTICULO);
END;
//


DROP PROCEDURE IF EXISTS CHECK_TICKET_VACIO //
CREATE PROCEDURE CHECK_TICKET_VACIO (IN ID_TICKET_COMP INT, IN ID_ART INT)
BEGIN
	DECLARE ART_AUX INT;
	SELECT TA.ID_ARTICULO INTO ART_AUX FROM TICKET_ARTICULO TA WHERE TA.ID_TICKET = ID_TICKET_COMP AND TA.ID_ARTICULO <> ID_ART LIMIT 1;
	IF (ART_AUX IS NULL)THEN
		DELETE FROM TICKET WHERE ID =ID_TICKET_COMP;
	END IF;
END;
//
DELIMITER ;


#Trigger para aumentar o reducir el stock ante cambios en un ticket. (Devolucionesparciales)
DELIMITER //
DROP TRIGGER IF EXISTS AJST_STOCK_MOD_TICKET //
CREATE TRIGGER AJST_STOCK_MOD_TICKET
BEFORE UPDATE ON TICKET_ARTICULO
FOR EACH ROW 
BEGIN
	DECLARE STOCK_DSP INT;
	IF(NEW.ID_ARTICULO = OLD.ID_ARTICULO)THEN
		IF(NEW.CANT<OLD.CANT)THEN
			UPDATE ARTICULO SET STOCK= STOCK +(OLD.CANT-NEW.CANT)WHERE ID=NEW.ID_ARTICULO ;
		ELSEIF(NEW.CANT > OLD.CANT)THEN
			SELECT STOCK INTO STOCK_DSP FROM ARTICULO WHERE ID=NEW.ID_ARTICULO;
			IF(STOCK_DSP<(NEW.CANT - OLD.CANT))THEN
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "NO SE PUEDE MODIFICAR EL TICKET YA QUE LAS UDS ADICIONALES SON INFERIORES AL STOCK DEL ARTICULO";
			ELSE
				UPDATE ARTICULO SET STOCK= STOCK - (NEW.CANT - OLD.CANT)WHERE ID=NEW.ID_ARTICULO ;
			END IF;
		END IF ;
	ELSE
		SELECT STOCK INTO STOCK_DSP FROM ARTICULO WHERE ID = NEW.ID_ARTICULO;
		IF(STOCK_DSP < NEW.CANT)THEN 
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "NO SE PUEDE MODIFICAR EL TICKET YA QUE EL NUEVO ARTICULO NO DISPONE DE TANTO STOCK";
		ELSE
			UPDATE ARTICULO SET STOCK= STOCK - NEW.CANT WHERE ID=NEW.ID_ARTICULO ;
			UPDATE ARTICULO SET STOCK= STOCK + OLD.CANT WHERE ID=OLD.ID_ARTICULO ;
		END IF;
	END IF;
END;
//
DELIMITER ;


#Comprueba los ticktes y si no aparecen en ticket_articulo lo elimina
DELIMITER //
DROP PROCEDURE IF EXISTS COMPRUEBA_TICKETS_VACIOS //
CREATE PROCEDURE COMPRUEBA_TICKETS_VACIOS()
BEGIN
	DECLARE CANT_TICKETS INT;
	DECLARE CONT INT;
	DECLARE ID_AUX INT;
	DECLARE AUX INT;
	#DECLARE ART_AUX INT;
	SELECT COUNT(T.ID) INTO CANT_TICKETS FROM TICKET T;
	SET CONT=1;
	WHILE CONT <= CANT_TICKETS DO
		SELECT CLAVE INTO ID_AUX FROM (SELECT ROW_NUMBER() OVER (ORDER BY ID)LINEA, T.ID  AS CLAVE FROM TICKET T ORDER BY T.ID)AS T2 WHERE T2.LINEA=CONT;
		SELECT COUNT(ID_TICKET) INTO AUX FROM TICKET_ARTICULO TA WHERE ID_TICKET = ID_AUX LIMIT 1;
		#SELECT ID_ARTICULO INTO ART_AUX FROM TICKET_ARTICULO TA WHERE ID_TICKET = ID_AUX LIMIT 1;
		IF AUX = 0 THEN
			DELETE FROM TICKET WHERE ID = ID_AUX;
		END IF;
		SET CONT = CONT + 1;
	END WHILE;
END;
//
DELIMITER ;


/*
DELETE FROM articulo WHERE ID_A =13;
CALL COMPRUEBA_TICKETS_VACIOS(); 
SELECT * FROM TICKET;
SELECT * FROM TICKET_ARTICULO;
SELECT * FROM articulo a ;*/


#Vista para el Dependiente de los artículos disponibles
#Los permisos los tiene el admin, ya que para la parte de programación es útil
DROP VIEW IF EXISTS ART_DISPONIBLES;
CREATE VIEW ART_DISPONIBLES AS
SELECT * FROM ARTICULO A 
LEFT JOIN VIDEOJUEGO V ON V.ID_V =A.ID_A 
LEFT JOIN CONSOLA C ON C.ID_C =A.ID_A ;


#Vista resumen para el administrador con los datos de los 5 artículos más vendidos
DROP VIEW IF EXISTS CINCO_ART_VENDIDOS ;
CREATE VIEW CINCO_ART_VENDIDOS AS
SELECT A.ID_A, V.TITULO, C.MODELO, SUM(TA.CANT)AS TOT_VEND FROM ARTICULO A 
JOIN TICKET_ARTICULO TA ON TA.ID_ARTICULO = A.ID_A 
LEFT JOIN VIDEOJUEGO V ON V.ID_V =A.ID_A 
LEFT JOIN CONSOLA C ON C.ID_C =A.ID_A GROUP BY A.ID_A ORDER BY TOT_VEND DESC,A.PRECIO  LIMIT 5;


#Vista resumen de los Tickets para el Administrador con los datos ordenados desde el ticket más actual al más antiguo
DROP VIEW IF EXISTS RESUMEN_TICKETS;
CREATE VIEW RESUMEN_TICKETS AS
SELECT T.ID, SUM(CANT*PRECIO)AS TOTAL, T.FECHA_HORA  FROM TICKET T 
JOIN TICKET_ARTICULO TA ON T.ID = TA.ID_TICKET 
JOIN ARTICULO A ON A.ID_A = TA.ID_ARTICULO 
GROUP BY T.ID ORDER BY FECHA_HORA DESC, ID ;

DROP VIEW IF EXISTS RESUMEN_TICKETS_2;
CREATE VIEW RESUMEN_TICKETS_2 AS
SELECT T.ID AS TICKET, A.ID_A AS ARTICULO, A.PRECIO , CANT, A.PRECIO*TA.CANT AS TOT_PRECIO_ARTICULO  FROM TICKET T 
JOIN TICKET_ARTICULO TA ON T.ID = TA.ID_TICKET 
JOIN ARTICULO A ON A.ID_A=TA.ID_ARTICULO ;


#usuario admin y permisos
DROP USER IF EXISTS 'admin';
CREATE USER 'admin' IDENTIFIED BY 'admin';


/*
DROP ROLE IF EXISTS ADMINS;
CREATE ROLE ADMINS; 
GRANT ALL PRIVILEGES ON tienda_de_videojuegos TO ADMINS;

GRANT ADMINS TO 'admin';
*/

#==========================================================================================================================
#====================================================Requisitos extra======================================================
#VARIABLE GLOBAL A TRUE

SET GLOBAL LOG_BIN_TRUST_FUNCTION_CREATORS = 1;

#Una función que calcule el total del bruto vendido para un mes dado
DELIMITER //
DROP FUNCTION IF EXISTS BRUTO_EN_MES //
CREATE FUNCTION BRUTO_EN_MES(CAD VARCHAR(10))
RETURNS DECIMAL(8,2)
BEGIN
	DECLARE TORET DECIMAL(8,2);
	SELECT SUM(CANT * PRECIO) INTO TORET FROM ticket t JOIN ticket_articulo ta ON ta.ID_TICKET = t.ID JOIN articulo a ON a.ID_A = ta.ID_ARTICULO WHERE
	FECHA_HORA LIKE CONCAT(CAD,"%");
	RETURN TORET;
END;
//


DROP FUNCTION IF EXISTS SOLO_ANHO_MES //
CREATE FUNCTION SOLO_ANHO_MES(FECHA TIMESTAMP)
RETURNS VARCHAR(10)
BEGIN
	DECLARE MES_AUX INT;
	DECLARE ANHO YEAR;
	DECLARE MES VARCHAR(3);
	DECLARE TORET VARCHAR(10);
	SET MES = CONCAT(MONTH(FECHA),"");
	SET ANHO = YEAR(FECHA);
	SET MES_AUX = MES * 1 ;
	IF (MES<10) THEN
		SET TORET= CONCAT(ANHO,"-0",MES);
	ELSE 
		SET TORET= CONCAT(ANHO,"-",MES);
	END IF;
	RETURN TORET;
END;
//
DELIMITER ;


DROP VIEW IF EXISTS BRUTO_POR_MES;
CREATE VIEW BRUTO_POR_MES AS
SELECT SOLO_ANHO_MES(FECHA_HORA) AS ANHO_MES, 
BRUTO_EN_MES(SOLO_ANHO_MES(FECHA_HORA)) AS BRUTO 
FROM TICKET 
GROUP BY ANHO_MES ORDER BY ANHO_MES;

#Crear una tabla que contenga el valor del bruto de un mes y el mes y año encuestión
DROP TABLE IF EXISTS RESUMEN_VENTAS_ANUALES;
CREATE TABLE RESUMEN_VENTAS_ANUALES(
ANHO YEAR PRIMARY KEY,
TOT_ENERO INT NOT NULL DEFAULT 0,
TOT_FEBRERO INT NOT NULL DEFAULT 0,
TOT_MARZO INT NOT NULL DEFAULT 0,
TOT_ABRIL INT NOT NULL DEFAULT 0,
TOT_MAYO INT NOT NULL DEFAULT 0,
TOT_JUNIO INT NOT NULL DEFAULT 0,
TOT_JULIO INT NOT NULL DEFAULT 0,
TOT_AGOSTO INT NOT NULL DEFAULT 0,
TOT_SEPTIEMBRE INT NOT NULL DEFAULT 0,
TOT_OCTUBRE INT NOT NULL DEFAULT 0,
TOT_NOVIEMBRE INT NOT NULL DEFAULT 0,
TOT_DICIEMBRE INT NOT NULL DEFAULT 0,

CHECK(ANHO >= 1000),
CHECK(ANHO <= 9999)
);

#Un procedimiento que, utilizando la función anterior, incluya un resumen anual enuna nueva tabla para un año dado si no existe ya
DELIMITER //
DROP PROCEDURE IF EXISTS CREAR_RESUMENES_VENTAS //
CREATE PROCEDURE CREAR_RESUMENES_VENTAS()
BEGIN
	DECLARE VUELTAS INT;
	DECLARE CONT INT;
	DECLARE AUX VARCHAR(10);
	DECLARE ANHO_COMP YEAR;
	DECLARE ANHO_ANT_COMP YEAR;
	DECLARE AUX2 INT;
	DECLARE MES_COMP VARCHAR(3);
	DECLARE CANT INT;
	DELETE FROM RESUMEN_VENTAS_ANUALES;
	SET ANHO_ANT_COMP=0;
	SELECT COUNT(ANHO_MES)INTO VUELTAS FROM BRUTO_POR_MES;
	SET CONT = 1;
	WHILE CONT <= VUELTAS DO
		SELECT CLAVE INTO AUX FROM (SELECT ROW_NUMBER() OVER (ORDER BY ANHO_MES)LINEA, ANHO_MES AS CLAVE FROM BRUTO_POR_MES)AS T2 WHERE T2.LINEA=CONT;
		SET ANHO_COMP=LEFT(AUX, 4);
		
		IF(ANHO_COMP <> ANHO_ANT_COMP)THEN
			SELECT COUNT(ANHO) INTO AUX2 FROM RESUMEN_VENTAS_ANUALES WHERE ANHO=ANHO_COMP ORDER BY ANHO DESC LIMIT 1;
			IF (AUX2 = 0) THEN
				INSERT INTO RESUMEN_VENTAS_ANUALES(ANHO)VALUES(ANHO_COMP);
			END IF;
		END IF;
	
		SET MES_COMP = RIGHT(AUX,2);
		SELECT BRUTO INTO CANT FROM BRUTO_POR_MES WHERE ANHO_MES = AUX;
	
		IF(MES_COMP = "01")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_ENERO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "02")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_FEBRERO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "03")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_MARZO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "04")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_ABRIL = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "05")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_MAYO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "06")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_JUNIO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "07")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_JULIO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "08")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_AGOSTO = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "09")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_SEPTIEMBRE = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "10")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_OCTUBRE = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "11")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_NOVIEMBRE = CANT WHERE ANHO = ANHO_COMP;
		ELSEIF(MES_COMP = "12")THEN
			UPDATE RESUMEN_VENTAS_ANUALES SET TOT_DICIEMBRE = CANT WHERE ANHO = ANHO_COMP;
		END IF;
	
		SET ANHO_ANT_COMP = ANHO_COMP;
		SET CONT = CONT + 1;
	END WHILE;
END;
//
DELIMITER ;

#SELECT * FROM RESUMEN_VENTAS_ANUALES ORDER BY ANHO DESC LIMIT 1;
#SELECT * FROM bruto_por_mes bpm ORDER BY ANHO_MES;

INSERT INTO TICKET(FECHA_HORA)VALUES("2023-01-01");
INSERT INTO TICKET_ARTICULO(ID_TICKET,ID_ARTICULO,CANT) VALUES(7,1,5);

CALL CREAR_RESUMENES_VENTAS();

#Creación de un usuario administrador y un usuario dependiente y de sus roles correspondientes

DROP USER IF EXISTS 'empleado';
CREATE USER 'empleado' IDENTIFIED BY '1234';
GRANT UPDATE, DELETE, INSERT, SELECT ON TICKET TO 'empleado';
GRANT UPDATE, DELETE, INSERT, SELECT ON TICKET_ARTICULO TO 'empleado';
GRANT EXECUTE ON PROCEDURE CREAR_RESUMENES_VENTAS TO 'empleado';
GRANT SELECT ON ART_DISPONIBLES TO 'empleado';
GRANT SELECT ON RESUMEN_TICKETS TO 'empleado';
GRANT SELECT ON RESUMEN_TICKETS_2 TO 'empleado';

#Crear una vista para que el dependiente vea un resumen de los artículos a la venta con los datos más relevantes en cada caso, dependiendo del modelo de datos
DROP VIEW IF EXISTS RESUMEN_ARTICULOS;
CREATE VIEW RESUMEN_ARTICULOS AS 
SELECT ID_A, PRECIO, STOCK, TITULO, MARCA, MODELO 
FROM  ART_DISPONIBLES AD;

GRANT SELECT ON RESUMEN_ARTICULOS TO 'empleado';


#Crear una vista para que el dependiente vea los artículos ordenados por precio de menor a mayor
DROP VIEW IF EXISTS ARTICULOS_ORDENADOS_PRECIO;
CREATE VIEW ARTICULOS_ORDENADOS_PRECIO AS
SELECT * FROM ART_DISPONIBLES ORDER BY PRECIO ASC;


GRANT SELECT ON ARTICULOS_ORDENADOS_PRECIO TO 'empleado';
GRANT ALL PRIVILEGES ON TIENDA_DE_VIDEOJUEGOS.* TO 'admin';
#